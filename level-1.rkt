#lang racket

(define
  level-1
  '("print(\"LEVEL 1\n\")"
    "print(\"you wake up in another small cell\n\")"
    "let box_open = 0"
    "let got_book = 0"
    "let got_box = 0"
    "print(\"> \")"
    "let input = split_on(read(), \" \")"
    "if !input! == []:"
    " goto 5"
    "endif"
    "let args = rest(!input!)"
    "case first(!input!):"
    "\"escape\":"
    " print(\"there's no way out\n\")"
    "\"look\":"
    " if (!args! == [\"around\"]) | (!args! == []):"
    "  print(\"you're in a small cell. there's a box and a door here\n\")"
    " elseif (!args! == [\"at\",\"box\"]) | (!args! == [\"box\"]):"
    "  if $box_open$:"
    "   if $got_book$:"
    "    print(\"the box is empty\n\")"
    "   else:"
    "    print(\"the box contains a book\n\")"
    "   endif"
    "  else:"
    "   print(\"a small wooden box, with the lid closed\n\")"
    "  endif"
    " elseif (!args! == [\"at\",\"door\"]) | (!args! == [\"door\"]):"
    "  print(\"presumably it leads to freedom, if you can get it open\n\")"
    " elseif (!args! == [\"at\",\"book\"]) | (!args! == [\"book\"]):"
    "  print(\"it's called EXECUTION PATH. maybe it'll say something useful\n\")"
    " else:"
    "  print(\"I don't understand what you want to look at\n\")"
    " endif"
    "\"open\":"
    " if ($args$ == [\"box\"]) | ($args$ == [\"lid\"]):"
    "  if $box_open$:"
    "   print(\"the box is already open\n\")"
    "  else:"
    "   let box_open = 1"
    "   print(\"you open the box\n\")"
    "   if $got_book$ == 0:"
    "    print(\"there's a book inside\n\")"
    "   endif"
    "  endif"
    " elseif !args! == [\"door\"]:"
    "  print(\"the door is locked\n\")"
    " elseif !args! == [\"book\"]:"
    "  print(\"try 'read' instead of 'open'\")" 
    " else:"
    "  print(\"I don't understand what you're trying to open\n\")"
    " endif"
    "\"close\":"
    " if !args! == [\"box\"]:"
    "  if $box_open$:"
    "   let box_open = 0"
    "   print(\"you close the box\n\")"
    "  else:"
    "   print(\"the box is already closed\n\")"
    "  endif"
    " elseif !args! == [\"door\"]:"
    "  print(\"the door is already closed\n\")"
    " else:"
    "  print(\"I don't understand what you're trying to close\n\")"
    " endif"
    "\"get\" \"take\":"
    " case !args!:"
    "  [\"box\"]:"
    "   if $got_box$:"
    "    print(\"you already have the box\n\")"
    "   else:"
    "    let got_box = 1"
    "    print(\"you pick up the box\n\")"
    "   endif"
    "  [\"book\"]:"
    "   if $got_book$:"
    "    print(\"you already have the book\n\")"
    "   elseif $box_open$:"
    "    let got_book = 1"
    "    print(\"you pick up the book\n\")"
    "   else:"
    "    print(\"you can't see a book here\n\")"
    "   endif"
    "  [\"door\"]:"
    "   print(\"you can't pick that up, it's fixed in place\n\")"
    "  default:"
    "   print(\"I don't understand what you're trying to get\n\")"
    " endcase"
    "\"read\":"
    " if (!args! == [\"the\",\"book\"]) | (!args! == [\"book\"]):"
    "  print(\"EXECUTION PATH\n\n...\nsometimes, a program that responds differently to different kinds of input has a vulnerability only in processing one kind. in that case an attacker must make their input look like one of the vulnerable type. imagine a program that splits input into seperate words, then processes the second word in an insecure way only if the first word is 'hello'\n...\n\")"
    " else:"
    "  print(\"you can't read that, it doesn't have words\n\")"
    " endif"
    "\"quit\" \"give\":"
    " if (first(!input!) == \"quit\") | ((first(!input!) == \"give\") & (!args! == [\"up\"])):"
    "  give_up()"
    " else:"
    "  print(\"I didn't understand that. if you're trying to return to the main menu, use 'quit' or 'give up'\n\")"
    " endif"
    "default:"
    " print(\"I didn't understand that\n\")"
    "endcase"
    "goto 5"))

(provide level-1)
