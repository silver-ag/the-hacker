#lang racket

(require "SMOG.rkt")

(define
  level-4
  '("print(\"LEVEL 4\n\")"
    "print(\"you awake in a bedroom of a decrepit old house\n\")"
    "let inventory = []"
    "let violet_on_bed = 1"
    "let q = ascii_code_to_char(34)"
    "let lintel = \"       . _______ .\n     .  /       \\  .\n   .    \\ O   O /    .\n . . . . |  ^  | . . . .\n    no   \\\"++!q!++\"|\"++!q!++\"|\"++!q!++\"/  escape\""
    "let bookcover = \"()/\"++!q!++\"+++++++'\\\n()|' DIARY '|\n()|'       '|\n()|'       '|\n()|'       '|\n()\\'+++++++'/\n\""
    "let violet = \"    __   __\n   /  \\ /  \\\n   \\   V   /\n ,-,_  *  _,-,\n|   _`/ \\._   |\n`'-' !   ! '-'\n     \\___/\\\n          \\\\\""
    "print(\"> \")"
    "let input = string_to_char_list(read())"
    "let new_input = []"
    "if !input! == []:"
    " let input = split_on(implode(!new_input!,\"\"), \" \")"
    "else:"
    " if first(!input!) == !q!:"
    "  let next_char = \"\""
    " else:"
    "  let next_char = first(!input!)"
    " endif"
    " let new_input = list_add_back(!new_input!, !next_char!)"
    " let input = rest(!input!)"
    " goto 11"
    "endif"
    "if !input! == []:"
    " goto 8"
    "endif"
    "let args = rest(!input!)"
    "if !args! != []:"
    " if first(!args!) == \"at\":"
    "  let args = rest(!args!)"
    " endif"
    "endif"
    "if !args! != []:"
    " if first(!args!) == \"the\":"
    "  let args = rest(!args!)"
    " endif"
    "endif"
    "case first($input$):"
    "\"escape\":"
    " print(\"apparently that might be tricky. the carved lintel over the door proclaims:\n\"++!lintel!++\"\n\n\")"
    "\"look\":"
    " if (!args! == []) | (!args! == [\"around\"]):"
    "  print(\"you are in a bedroom of a decrepit old house. there's a door and a window, and a small table next to the bed\n\")"
    " elseif (!args! == [\"door\"]):"
    "  print(\"the door seems to be locked from the outside. there's a threatening carving in the wood over the lintel:\n\"++!lintel!++\"\n\n\")"
    " elseif (!args! == [\"diary\"]) | (!args! == [\"book\"]):"
    "  print(\"it's heavy and elaborately bound\n\n\"++!bookcover!++\"\n\")"
    " elseif (!args! == [\"bed\"]) & (!violet_on_bed! > 0):"
    "  print(\"the bed is old and dusty. there's a single dried violet lying on it\n\"++!violet!++\"\n\n\")"
    " elseif (!args! == [\"bed\"]):"
    "  print(\"the bed is old and dusty\n\")"
    " elseif !args! == [\"table\"]:"
    "  print(\"it's small, but decorated with intricate carvings\n\")"
    "  if not(contains(!inventory!, \"book\")):"
    "   print(\"there's a book lying on it\n\")"
    "  endif"
    " elseif !args! == [\"window\"]:"
    "  print(\"it's sunset outside. there's nobody around as far as you can see\n\")"
    " else:"
    "  print(\"I don't understand what you want to look at\n\")"
    " endif"
    "\"get\" \"take\":"
    " if (!args! == [\"book\"]) | (!args! == [\"diary\"]):"
    "  if contains(!inventory!, \"diary\"):"
    "   print(\"you already have the diary\n\")"
    "  else:"
    "   print(\"you pick up the diary\n\")"
    "   let inventory = list_add_front(!inventory!, \"diary\")"
    "  endif"
    " elseif (!args! == [\"violet\"]) | (!args! == [\"flower\"]):"
    "  if !violet_on_bed! == 1:"
    "   print(\"you pick up the delicate flower\n\")"
    "   let violet_on_bed = \"\""
    "  else:"
    "   print(\"you already have that\n\")"
    "  endif"
    " else:"
    "  print(\"I don't understand what you're trying to get\n\")"
    " endif"
    "\"read\":"
    " if (!args! == [\"book\"]) | (!args! == [\"diary\"]):"
    "  print(\"...\nsometimes programmers will try to strip all the dangerous characters like double quotes out of user input. they usually miss a few\n...\n\")"
    " else:"
    "  print(\"you can't read that, it doesn't have any words\n\")"
    " endif"
    "\"quit\" \"give\":"
    " if (first(!input!) == \"quit\") | ((first(!input!) == \"give\") & (!args! == [\"up\"])):"
    "  give_up()"
    " else:"
    "  print(\"I didn't understand that. if you're trying to return to the main menu, use 'quit' or 'give up'\n\")"
    " endif"
    "default:"
    " print(\"I didn't understand that\n\")"
    "endcase"
    "goto 8"))

(provide level-4)
